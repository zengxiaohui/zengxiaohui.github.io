'use strict';

import Base from './base.js';
import UserMgr from '../connect/usermgr.js';
import BizMgr from '../connect/bizmgr.js';

var mgr = new UserMgr();
//-------------------------------
var mgm = new BizMgr();
var errorCode = 0;
export default class extends Base {

	 async indexAction(){
	 	return this.display();
	 }



   async  testpageAction(){

      return this.display();
   }

   async adduserAction(){

     //如果是get请求，直接显示登录页面
    if(this.isGet()){
      return this.display();
    }
   }



   
   async discpriceinforAction(){

    var discinfor = this.get();
    console.log("======discinforAction start=============");


    console.log(discinfor);



    this.assign("discinfor",discinfor);
    if(discinfor.itemId==1){
        this.assign("itemname","FD-Tissue-180");

    }

    if(discinfor.itemId==2) {
        
         this.assign("itemname","FD-ctDNA-180");
    }

    if(discinfor.itemId==3){
        this.assign("itemname","FD-Tissue-600");

    }

    if(discinfor.itemId==4) {
        
         this.assign("itemname","FD-ctDNA-600");
    }
    if(discinfor.itemId==5){
        this.assign("itemname","FD-Exome");

    }

    if(discinfor.itemId==6) {
        
         this.assign("itemname","FD-ctDNA-Exome");
    }
    if(discinfor.itemId==7){
        this.assign("itemname","FD-Tissue-RNA");

    }

    if(discinfor.itemId==8) {
        
         this.assign("itemname","FD-Tissue-180+FD-ctDNA-180");
    }
     if(discinfor.itemId==9) {
        
         this.assign("itemname","FD-Tissue-600+FD-ctDNA-600");
    }
    //return this.redirect("/back/discpriceinfor");



    return this.display();

   }
   async updatepriceAction(){

      let updateinfor = this.post();

      console.log("======updatepriceAction start=========="); 
      console.log(updateinfor);
      var senderId = this.cookie('userId');

      try{
        let pm = await mgm.updateProductionPrice(senderId,updateinfor.itemId,updateinfor.name,updateinfor.desc,updateinfor.price)
        .then(function(result){

          
          return result;
        },function(error){

          return error;
          
        })


      }catch(e){

      }

      return this.redirect('pricelist');


   }
   async productioninforAction(){


    try{
      let infor = this.get();
      console.log("============[productioninforAction start]=========== " );

     // var name = encodeURIComponent(infor.name);
      //var name1 = decodeURI(name)
      var name = infor.name;

      if(name=="FD-Tissue-180 FD-ctDNA-180"){

        name="FD-Tissue-180+FD-ctDNA-180"
      }
      if(name=="FD-Tissue-600 FD-ctDNA-600"){

        name="FD-Tissue-600+FD-ctDNA-600"
      }
      this.assign("name1",name);
      console.log(infor);
      this.assign("infor",infor);

    }catch(e){


    }


    return this.display();
   }
   async updateuserAction(){
    try{
    let infor = this.post();
    console.log("=====updateuserAction start=======");
    console.log(infor);
      var senderId = this.cookie('userId');
      //var userId = this.get('userId');
      let pm = await mgr.updateUserInfor(senderId,infor,null,false,null)
      .then(function(result){

          return result;

      },function(error){

        console.log(error);

      })



    }catch(e){


    }





      return this.redirect("pricelist");
   }
   async userinforAction(){
    try{


      let infor = this.get();
      console.log("============[userinforAction]=========== " );
      console.log(infor);
      this.assign("infor",infor);

      return this.display();



    }catch(e){


    }


   }
   async deleteuserAction(){
      try{
        var senderId = this.cookie('userId');
        var userId = this.get('userId');
      console.log("[userlistAction] " + userId);
      let pm  = await mgr.deleteUser(senderId,userId)
    .then( function (result) { 
      //process.stdout.write(result);
      //console.log(result.toString()); 
      //var ret = JSON.parse(result.toString());
      
      return result;
    },   
    function (error) {   
       console.log(error);   
    });
    
    console.log("========deleteuserAction start================");
    console.log(pm);
    //return this.redirect('/back/userlist');
    return this.redirect('/back/userlist');
      
    }catch(e){
        return this.redirect("/index/index");
    }

    
   }
   async disclistAction(){

    try{
        var userId = this.cookie('userId');
      console.log("[userlistAction] " + userId);
      let pm  = await mgm.getDiscPriceList(userId)
    .then( function (result) { 
      //process.stdout.write(result);
      //console.log(result.toString()); 
      //var ret = JSON.parse(result.toString());
     // pm.pname = BizMgr.getPrductName(pm.productid)
      return result;
    },   
    function (error) {   
       console.log(error);   
    });
    console.log("======disclistAction pm=========");
    console.log(pm);
  
     this.assign('disclist',pm.discList);


   /* 
    var pmstr = pm;
    console.log(pmstr);
   // console.log(typeof pm.userList);
   // console.log(pm.userList.toString())
    this.assign('userlist',pm.userList);
    this.assign('pm',pm);*/
    
      return this.display();


      
    }catch(e){
        return this.redirect("/index/index");
    }

   }

   async pricelistAction(){

    try{
        var userId = this.cookie('userId');
      console.log("[userlistAction] " + userId);
      let pm  = await mgm.getTestItemList(userId)
    .then( function (result) { 
      //process.stdout.write(result);
      //console.log(result.toString()); 
      //var ret = JSON.parse(result.toString());
      
      return result;
    },   
    function (error) {   
       console.log(error);   
    });
    console.log("======pricelistAction pm=========");
    console.log(pm);
  /* for(let j in pm.itemList){
      var elm = pm.userList[j];
      console.log(elm.userId + "|" + elm.name + "|" + elm.password); 
      this.assign('elm',elm);*/
      this.assign('itemlist',pm.itemList);


   /* }*/
   // console.log(pm);
    var pmstr = pm;
    console.log(pmstr);
   // console.log(typeof pm.userList);
   // console.log(pm.userList.toString())
    this.assign('userlist',pm.userList);
    this.assign('pm',pm);
    this.assign('json',"{name:jiang,age:25}");
      return this.display();


      
    }catch(e){
        return this.redirect("/index/index");
    }

   }
	 async userlistAction(){
      try{


    	var userId = this.cookie('userId');
    	console.log("[userlistAction] " + userId);
      let pm  = await mgr.getUserList(userId, "")
    .then( function (result) { 
      //process.stdout.write(result);
      //console.log(result.toString()); 
      //var ret = JSON.parse(result.toString());
      
      return result;
    },   
    function (error) {   
       console.log(error);   
    });
    
    for(let j in pm.userList){
      var elm = pm.userList[j];
      console.log(elm.userId + "|" + elm.name + "|" + elm.password); 
      this.assign('elm',elm);
      
      this.assign('userlist',pm.userList);
      
    }
   // console.log(pm);
    var pmstr = pm;
    console.log(pmstr);
   // console.log(typeof pm.userList);
   // console.log(pm.userList.toString())
    this.assign('userlist',pm.userList);
    this.assign('pm',pm);
    this.assign('json',"{name:jiang,age:25}");
      return this.display();
      }catch(e){
        return this.redirect("/index/index");
      }
   }


   async testAction(){
    console.log("==========  http test ==============");
    var http1 = require('http');
    var options = { 
         hostname: 'http://bs59ac.natappfree.cc/back/test', 
         port: 80, 
         path: '/upload', 
         method: 'POST' 
       }; 

    try{
      var param =  http1._post;
      console.log("----param --------------");
      console.log(param);

    }catch(e){


    }



   
    console.log("-----------------------------------");
   	let infor = this.post();
   	console.log("-------start---------");
   	console.log(infor);
   	var userId1 = infor.reqReserved;
   	var userId2 = userId1.split(",");
   	var userId =userId2[0];
   	var secToken =userId2[1];
   	//var userId = this.cookie('userId');

   	var infor1 = JSON.stringify(infor); 

    //console.log(infor1.txnType);


//对传过来的json重新排序
    var infor11 =
    {txnType:infor.txnType,
 respCode:infor.respCode, 
currencyCode:infor.currencyCode, 
merId:infor.merId,
settleDate:infor.settleDate, 
txnSubType:infor.txnSubType, 
version:infor.version, 
txnAmt:infor.txnAmt, 
signMethod:infor.signMethod, 
certId:infor.certId, 
settleAmt:infor.settleAmt, 
encoding:infor.encoding, 
settleCurrencyCode:infor.settleCurrencyCode, 
traceTime:infor.traceTime, 
bizType:infor.bizType,
 respMsg:infor.respMsg, 
 traceNo:infor.traceNo,
 queryId:infor.queryId, 
 orderId:infor.orderId,
 signature:infor.signature,
  accessType:infor.accessType,
  txnTime:infor.txnTime} 

    /*{
txnType:infor.txnType,
respCode:infor.respCode,
currencyCode:infor.currencyCode,
merId:infor.merId,
settleDate:infor.settleDate,
txnSubType:infor.txnSubType,
txnAmt:infor.txnAmt,
version:infor.version,
signMethod:infor.signMethod,
certId:infor.certId,
settleAmt:infor.settleAmt,
traceTime:infor.traceTime,
settleCurrencyCode:infor.settleCurrencyCode,
encoding:infor.encoding,
respMsg:infor.respMsg,
bizType:infor.bizType,
traceNo:infor.traceNo,
queryId:infor.queryId,
signature:infor.signature,
orderId:infor.orderId,
txnTime:infor.txnTime,
accessType:infor.accessType}*/


console.log("=========infor11===========");
console.log(infor11);
    var inforStr = JSON.stringify(infor11); 
   	var infor2 = encodeURI(inforStr);

   //	var test  = "{accessType:0,bizType:000201,certId:69597475696,currencyCode:156,encoding:UTF-8,merId:898320573920750,orderId:0000000241,queryId:201703241515424211028}"
   	//var test1 =encodeURI(test);
   	let pm = await mgm.unionVerify(userId,'UTF-8',infor2)
   	.then(function(result){
   		console.log("=======result===========");
   		console.log(result);

   		return result;
   	})
   	console.log("=======testAction pm=============");
   	console.log(pm);

    if(pm.errorCode==0){
      try{
        let pm = mgm.unionBill(userId,'UTF-8',infor2)
        .then(function(result){
          console.log(result);
        },function(error){
            console.log(error);
        })
      }catch(e){
          console.log("开票失败");
      }
      



    }
   	return this.display();
   }

   async backtestAction(){

   	console.log("==========backtestAction========");

    return this.display();
   }
  /* async testAction(){
      console.log("==========testAction start========");



      var pm  = this.post();

      console.log(pm);

      
    return this.display();
   }*/
}
